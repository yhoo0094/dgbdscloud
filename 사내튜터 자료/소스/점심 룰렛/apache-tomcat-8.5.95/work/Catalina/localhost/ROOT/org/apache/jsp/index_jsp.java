/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.95
 * Generated at: 2023-11-27 23:18:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\r\n");
      out.write("\r\n");
      out.write("<!--\r\n");
      out.write("    Winhweel.js pins and sound example by Douglas McKechie @ www.dougtesting.net\r\n");
      out.write("    See website for tutorials and other documentation.\r\n");
      out.write("\r\n");
      out.write("    The MIT License (MIT)\r\n");
      out.write("\r\n");
      out.write("    Copyright (c) 2018 Douglas McKechie\r\n");
      out.write("\r\n");
      out.write("    Permission is hereby granted, free of charge, to any person obtaining a copy\r\n");
      out.write("    of this software and associated documentation files (the \"Software\"), to deal\r\n");
      out.write("    in the Software without restriction, including without limitation the rights\r\n");
      out.write("    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n");
      out.write("    copies of the Software, and to permit persons to whom the Software is\r\n");
      out.write("    furnished to do so, subject to the following conditions:\r\n");
      out.write("\r\n");
      out.write("    The above copyright notice and this permission notice shall be included in all\r\n");
      out.write("    copies or substantial portions of the Software.\r\n");
      out.write("\r\n");
      out.write("    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n");
      out.write("    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n");
      out.write("    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n");
      out.write("    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n");
      out.write("    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n");
      out.write("    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n");
      out.write("    SOFTWARE.\r\n");
      out.write("\r\n");
      out.write("    ============================================================================\r\n");
      out.write("    Note:\r\n");
      out.write("        Tick Sound was recorded by DeepFrozenApps and was downloaded from http://soundbible.com/2044-Tick.html\r\n");
      out.write("        It has an attribution 3.0 licence.\r\n");
      out.write("-->\r\n");
      out.write("<html>\r\n");
      out.write("    <head>\r\n");
      out.write("    	<!-- <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> -->\r\n");
      out.write("    	\r\n");
      out.write("        <title>Launch Roulette</title>\r\n");
      out.write("        <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css\" integrity=\"sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N\" crossorigin=\"anonymous\">\r\n");
      out.write("        <link rel=\"stylesheet\" href=\"./CSS/main.css\" type=\"text/css\" />\r\n");
      out.write("        \r\n");
      out.write("        <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.1/jquery.min.js\"></script>\r\n");
      out.write("        <script type=\"text/javascript\" src=\"./JS/Winwheel.js\"></script>\r\n");
      out.write("        <script type=\"text/javascript\" src=\"./JS/LaunchRoulette.js\"></script>\r\n");
      out.write("        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/gsap/latest/TweenMax.min.js\"></script>\r\n");
      out.write("    </head>\r\n");
      out.write("	<body>\r\n");
      out.write("		<div align=\"center\">\r\n");
      out.write("			<br />\r\n");
      out.write("			<table cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td>\r\n");
      out.write("						<div class=\"power_controls\">\r\n");
      out.write("							<br /> <br />\r\n");
      out.write("							<table class=\"power\" cellpadding=\"10\" cellspacing=\"0\">\r\n");
      out.write("								<tr>\r\n");
      out.write("									<th align=\"center\">Power</th>\r\n");
      out.write("								</tr>\r\n");
      out.write("								<tr>\r\n");
      out.write("									<td width=\"78\" align=\"center\" id=\"pw3\"\r\n");
      out.write("										onClick=\"powerSelected(3);\">High</td>\r\n");
      out.write("								</tr>\r\n");
      out.write("								<tr>\r\n");
      out.write("									<td align=\"center\" id=\"pw2\" onClick=\"powerSelected(2);\">Med</td>\r\n");
      out.write("								</tr>\r\n");
      out.write("								<tr>\r\n");
      out.write("									<td align=\"center\" id=\"pw1\" onClick=\"powerSelected(1);\">Low</td>\r\n");
      out.write("								</tr>\r\n");
      out.write("							</table>\r\n");
      out.write("							<br /> <img id=\"spin_button\" src=\"spin_off.png\" alt=\"Spin\"\r\n");
      out.write("								onClick=\"startSpin();\" /> <br />\r\n");
      out.write("							<br /> &nbsp;&nbsp;<a href=\"#\"\r\n");
      out.write("								onClick=\"resetWheel(); return false;\">Play Again</a><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(reset)\r\n");
      out.write("						</div>\r\n");
      out.write("					</td>\r\n");
      out.write("					<td width=\"438\" height=\"582\" class=\"the_wheel\" align=\"center\"\r\n");
      out.write("						valign=\"center\">\r\n");
      out.write("						<canvas id=\"canvas\" width=\"434\" height=\"434\">\r\n");
      out.write("	                            <p style=\"color: white\" align=\"center\">Sorry, your browser doesn't support canvas. Please try another.</p>\r\n");
      out.write("	                        </canvas>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("			</table>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div align=\"center\">\r\n");
      out.write("			<table id=\"btnTable\" style=\"width: 50vw; height: 8vh;\">\r\n");
      out.write("				<colgroup>\r\n");
      out.write("					<col style=\"width: 80%\">\r\n");
      out.write("					<col style=\"width: 20%\">\r\n");
      out.write("				</colgroup>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td><input type=\"text\" id=\"addItemInput\" class=\"input\"></td>\r\n");
      out.write("					<td><button type=\"button\" class=\"btn btn-primary\" onclick=\"addItem()\">추가</button></td>\r\n");
      out.write("					\r\n");
      out.write("				</tr>\r\n");
      out.write("			</table>\r\n");
      out.write("		</div>\r\n");
      out.write("	</body>\r\n");
      out.write("\r\n");
      out.write("	<script>\r\n");
      out.write("		// Create new wheel object specifying the parameters at creation time.\r\n");
      out.write("// 		let segments = [ {\r\n");
      out.write("// 			'fillStyle' : '#eae56f',\r\n");
      out.write("// 			'text' : '찜닭'\r\n");
      out.write("// 		}, {\r\n");
      out.write("// 			'fillStyle' : '#89f26e',\r\n");
      out.write("// 			'text' : '지하식당'\r\n");
      out.write("// 		}, {\r\n");
      out.write("// 			'fillStyle' : '#7de6ef',\r\n");
      out.write("// 			'text' : '밀면'\r\n");
      out.write("// 		}, ]\r\n");
      out.write("		\r\n");
      out.write("		let segments = [];\r\n");
      out.write("	\r\n");
      out.write("		for (i = 0; i < segments.length; i++) {\r\n");
      out.write("			segments[i].fillStyle = \"#\"\r\n");
      out.write("					+ Math.round(Math.random() * 0xffffff).toString(16);\r\n");
      out.write("		};\r\n");
      out.write("	\r\n");
      out.write("		let numSegments = segments.length;\r\n");
      out.write("		let outerRadius = 212;\r\n");
      out.write("		let textFontSize = 28;\r\n");
      out.write("		let animation = {\r\n");
      out.write("			'type' : 'spinToStop',\r\n");
      out.write("			'duration' : 15,\r\n");
      out.write("			'spins' : 1000,\r\n");
      out.write("			'callbackFinished' : alertPrize,\r\n");
      out.write("			'callbackSound' : playSound, // Function to call when the tick sound is to be triggered.\r\n");
      out.write("			'soundTrigger' : 'pin' // Specify pins are to trigger the sound, the other option is 'segment'.\r\n");
      out.write("		};\r\n");
      out.write("		let pins = {\r\n");
      out.write("			'number' : 16\r\n");
      out.write("		};\r\n");
      out.write("	\r\n");
      out.write("		let theWheel = new Winwheel({\r\n");
      out.write("			'numSegments' : numSegments, // Specify number of segments.\r\n");
      out.write("			'outerRadius' : 212, // Set outer radius so wheel fits inside the background.\r\n");
      out.write("			'textFontSize' : 28, // Set font size as desired.\r\n");
      out.write("			'segments' : segments, // Define segments including colour and text.\r\n");
      out.write("			'animation' : animation, // Specify the animation to use.\r\n");
      out.write("			'pins' : pins\r\n");
      out.write("		// Number of pins. They space evenly around the wheel.\r\n");
      out.write("		});\r\n");
      out.write("	\r\n");
      out.write("		// -----------------------------------------------------------------\r\n");
      out.write("		// This function is called when the segment under the prize pointer changes\r\n");
      out.write("		// we can play a small tick sound here like you would expect on real prizewheels.\r\n");
      out.write("		// -----------------------------------------------------------------\r\n");
      out.write("		let audio = new Audio('tick.mp3'); // Create audio object and load tick.mp3 file.\r\n");
      out.write("	\r\n");
      out.write("		function playSound() {\r\n");
      out.write("			// Stop and rewind the sound if it already happens to be playing.\r\n");
      out.write("			audio.pause();\r\n");
      out.write("			audio.currentTime = 0;\r\n");
      out.write("	\r\n");
      out.write("			// Play the sound.\r\n");
      out.write("			audio.play();\r\n");
      out.write("		}\r\n");
      out.write("	\r\n");
      out.write("		// -------------------------------------------------------\r\n");
      out.write("		// Called when the spin animation has finished by the callback feature of the wheel because I specified callback in the parameters\r\n");
      out.write("		// note the indicated segment is passed in as a parmeter as 99% of the time you will want to know this to inform the user of their prize.\r\n");
      out.write("		// -------------------------------------------------------\r\n");
      out.write("		function alertPrize(indicatedSegment) {\r\n");
      out.write("			// Do basic alert of the segment text.\r\n");
      out.write("			// You would probably want to do something more interesting with this information.\r\n");
      out.write("			alert(indicatedSegment.text + \" ë¹ì²¨!\");\r\n");
      out.write("		}\r\n");
      out.write("	\r\n");
      out.write("		// =======================================================================================================================\r\n");
      out.write("		// Code below for the power controls etc which is entirely optional. You can spin the wheel simply by\r\n");
      out.write("		// calling theWheel.startAnimation();\r\n");
      out.write("		// =======================================================================================================================\r\n");
      out.write("		let wheelPower = 0;\r\n");
      out.write("		let wheelSpinning = false;\r\n");
      out.write("	\r\n");
      out.write("		// -------------------------------------------------------\r\n");
      out.write("		// Function to handle the onClick on the power buttons.\r\n");
      out.write("		// -------------------------------------------------------\r\n");
      out.write("		function powerSelected(powerLevel) {\r\n");
      out.write("			// Ensure that power can't be changed while wheel is spinning.\r\n");
      out.write("			if (wheelSpinning == false) {\r\n");
      out.write("				// Reset all to grey incase this is not the first time the user has selected the power.\r\n");
      out.write("				document.getElementById('pw1').className = \"\";\r\n");
      out.write("				document.getElementById('pw2').className = \"\";\r\n");
      out.write("				document.getElementById('pw3').className = \"\";\r\n");
      out.write("	\r\n");
      out.write("				// Now light up all cells below-and-including the one selected by changing the class.\r\n");
      out.write("				if (powerLevel >= 1) {\r\n");
      out.write("					document.getElementById('pw1').className = \"pw1\";\r\n");
      out.write("				}\r\n");
      out.write("	\r\n");
      out.write("				if (powerLevel >= 2) {\r\n");
      out.write("					document.getElementById('pw2').className = \"pw2\";\r\n");
      out.write("				}\r\n");
      out.write("	\r\n");
      out.write("				if (powerLevel >= 3) {\r\n");
      out.write("					document.getElementById('pw3').className = \"pw3\";\r\n");
      out.write("				}\r\n");
      out.write("	\r\n");
      out.write("				// Set wheelPower var used when spin button is clicked.\r\n");
      out.write("				wheelPower = powerLevel;\r\n");
      out.write("	\r\n");
      out.write("				// Light up the spin button by changing it's source image and adding a clickable class to it.\r\n");
      out.write("				document.getElementById('spin_button').src = \"spin_on.png\";\r\n");
      out.write("				document.getElementById('spin_button').className = \"clickable\";\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("	\r\n");
      out.write("		// -------------------------------------------------------\r\n");
      out.write("		// Click handler for spin button.\r\n");
      out.write("		// -------------------------------------------------------\r\n");
      out.write("		function startSpin() {\r\n");
      out.write("			// Ensure that spinning can't be clicked again while already running.\r\n");
      out.write("			if (wheelSpinning == false) {\r\n");
      out.write("				// Based on the power level selected adjust the number of spins for the wheel, the more times is has\r\n");
      out.write("				// to rotate with the duration of the animation the quicker the wheel spins.\r\n");
      out.write("				if (wheelPower == 1) {\r\n");
      out.write("					theWheel.animation.spins = 3;\r\n");
      out.write("				} else if (wheelPower == 2) {\r\n");
      out.write("					theWheel.animation.spins = 8;\r\n");
      out.write("				} else if (wheelPower == 3) {\r\n");
      out.write("					theWheel.animation.spins = 15;\r\n");
      out.write("				}\r\n");
      out.write("	\r\n");
      out.write("				// Disable the spin button so can't click again while wheel is spinning.\r\n");
      out.write("				document.getElementById('spin_button').src = \"spin_off.png\";\r\n");
      out.write("				document.getElementById('spin_button').className = \"\";\r\n");
      out.write("	\r\n");
      out.write("				// Begin the spin animation by calling startAnimation on the wheel object.\r\n");
      out.write("				theWheel.startAnimation();\r\n");
      out.write("	\r\n");
      out.write("				// Set to true so that power can't be changed and spin button re-enabled during\r\n");
      out.write("				// the current animation. The user will have to reset before spinning again.\r\n");
      out.write("				wheelSpinning = true;\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("	\r\n");
      out.write("		// -------------------------------------------------------\r\n");
      out.write("		// Function for reset button.\r\n");
      out.write("		// -------------------------------------------------------\r\n");
      out.write("		function resetWheel() {\r\n");
      out.write("			theWheel.stopAnimation(false); // Stop the animation, false as param so does not call callback function.\r\n");
      out.write("			theWheel.rotationAngle = 0; // Re-set the wheel angle to 0 degrees.\r\n");
      out.write("			theWheel.draw(); // Call draw to render changes to the wheel.\r\n");
      out.write("	\r\n");
      out.write("			//document.getElementById('pw1').className = \"\";  // Remove all colours from the power level indicators.\r\n");
      out.write("			//document.getElementById('pw2').className = \"\";\r\n");
      out.write("			//document.getElementById('pw3').className = \"\";\r\n");
      out.write("	\r\n");
      out.write("			wheelSpinning = false; // Reset to false to power buttons and spin can be clicked again.\r\n");
      out.write("	\r\n");
      out.write("			// ì¤í ë²í¼ íì±í\r\n");
      out.write("			document.getElementById('spin_button').src = \"spin_on.png\";\r\n");
      out.write("			document.getElementById('spin_button').className = \"clickable\";\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
